#在ghci中通过 :t 来检查表达式的类型
 ghci> :t 'a'
 'a' :: Char     -->字符类型
 ghci> :t "a"    
 "a" :: [Char]   -->字符列表类型
 ghci> :t True
 True :: Bool    -->布尔类型
 ghci> :t (True,'a')
 (True,'a') :: (Book,Char)  --> 元组类型

 注意:
 	:: 读作 "它的类型为"。凡是明确的类型,其首字母必须为大写。
 元组与列表不同,每个不同长度的元组都有其独立的类型. 

#函数类型声明
  //这是一个函数声明,声明这个函数有三个Int类型的参数
  //最后一个Int代表函数的返回类型
  func :: Int->Int->Int ->Int
  //该函数的定义
  func x y z = x + y + z

#函数名的第一个字母必须小写

#用ghc装载一个文件
  //----------------------hash.hs------------------
    //该函数需要两个入参
    //返回值是两个入参相加后再加3
    mysum x y = x + y + 3  //函数名的第一个字母必须小写 

  //------------------------------------------------
 
 加载hash.hs并调用mysum函数
 ghci>:l hash
 ghci>mysum 1 2
 ghci>6 
  
#常见类型
 Int 有界整数,GHC编译器规定Int的界限与机器相关,如64位CPU,那么Int用64位表示
 Integer 无界整数,效率没比Int高
 Float 单精度浮点数
 Double 双精度浮点数
 Bool 布尔值 True和False
 Char 表示一个Unicode字符
 元组 他的类型取决于当中的项的类型及数目,最多62个,最少0个

#类型变量
 例子: demo.hs文件
  mysum :: Int->Int->Int-Int    //函数类型声明,三个Int入参一个Int返回值
  mysum x y z = x + y + z       //函数定义

 在ghci中加载demo.hs文件名查看类型
 ghci> :l demo
 ghci> :t mysum 
 ghci> mysum :: Int -> Int -> Int //可以看到和声明的一致

 列子2: 对上面的函数不做声明
  mysum x y z = x + y + z      //没有声明，直接定义
 
 加载demo.hs并查看类型
  ghci> :l demo
  ghci> :t mysum
  ghci> mysum :: Num a => a -> a -> a -> a 
 可以看到和例子1稍有不同,这里a是个类型变量,表示任意类型.并不是具体类型
 因为具体类型首字母必须大写.
 其中 => 符号叫做类型约束符,表示a是一个Num类型的实例

 #类型类(typeclass)
   类型类是定义类型行为的接口.如果一个类型(比如 数字)是某个类型类(比如 Eq)的实例
   ,那么它就必须实现该类型类所描述的行为(函数)。
   比如Eq类型类就必须实现 == 和 /= 这两个函数 
 
  Eq是定义相等性的类型类,例如查看下 == 函数的声明:
  	//该函数的名字是一个特殊字符,所以查看它的类型必须用括号括起来
    ghci> :t (==) 
	
    //==函数的类型为:接收两个相同类型的参数,并返回一个布尔类型,并且a这个类型
    //是Eq这个类型类的实例
    ghci> (==) :: Eq a => a -> a -> Bool

  Eq这个类型类提供了判断相等性的接口,凡是可以比较相等性的类型必须是Eq类的实例.
  所以Haskell中所有的标准类型都是Eq类的实例.

 #Eq类型类
  Eq类型类,要求它的实例必须实现 == 和 /= 两个函数

 #Ord类型类
  Ord类型类用于定义可比较大小的类型的行为.比如它的实例必须实现<,>,<=,>=等函数
  例如:
	ghci> "abc" < "bcd"     //说明String([Char])实现了 < 函数
    ghci> True

    ghci> 5 >= 2            //Int或Integer等实现了 >= 函数
    ghci> True

 #Show类型类
  Show类型类的实例为可以表示为字符串的类型,show函数可以操作Show的实例,
  该函数接收一个Show的实例,然后将其转换为一个字符串
  例如:
	ghci> show 3
      "3"
    ghci> show 5.22
      "5.22"

 #Read类型类
  可以看做和Show相反,将字符串转换为具体类型,用read函数
  例如:
	ghci> read "4" + 5  //自动将"4"转换为数字并和5相加
    ghci> 9
   
    ghci> read "3" + "4"
    ghci> 7

    ghci> "4"   //错误,因为read无法推断出"4"到底是Show的那个实例(Int或Float等)
    
  使用类型注释可以告诉read该字符串到底是那种类型:
    ghci> read "4" :: Int  //说明 "4" 的类型是 Int
      4 
    ghci> read "4" :: Float
      4.0
    ghci> read "(3,'a')" :: (Int,Char)
      (3,'a')
    ghci> read "[1,2,3,4]" :: [Int]
      [1,2,3,4]

 #Enum类型类 





