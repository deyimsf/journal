Tcp首部数据格式
 0                                15  16                                31
 -------------------------------------------------------------------------
 |		16位源端口号         |		16位目的端口号           |
 -------------------------------------------------------------------------
 |				32位序号				 |
 -------------------------------------------------------------------------
 |				32位确认序号				 |
 -------------------------------------------------------------------------
 |            |          |U|A|P|R|S|F|					 |
 |4位首部长度 | 保留(6位)|R|C|S|S|Y|I|		16位窗口大小		 |
 |	      |		 |G|K|H|T|N|N|					 |
 -------------------------------------------------------------------------
 |              16位校验和           |       16位紧急指针                |
 -------------------------------------------------------------------------
 |                               自定义选项                              |
 -------------------------------------------------------------------------
 |                                 数据                                  |
 -------------------------------------------------------------------------

Tcp首部中6个标志比特说明
 URG	紧急指针(urgent pointer)
 ACK	确认应答
 PSH	接收方应该尽快将这个报文段交给应用层
 RST	重建连接
 SYN	请求建立连接
 FIN	请求断开连接

Tcp建立连接
            SYN 157445:157445 <mss 1024>
 --------------------------------------------------->
      SYN 189893:189893 ack 157446 , <mss 1024>
 <---------------------------------------------------
                    ack 189894
 --------------------------------------------------->

Tcp终止连接
           FIN
  ---------------------->
           ACK
  <---------------------
           FIN
  <---------------------
           ACK
  --------------------->

套接字复位(RST,异常关闭)
 RST报文段不会导致另一端产生任何响应，另一端根本不进行确认。
 收到RST的一方将终止该连接，并通知应用层连接复位。
 java例子:
  ServerSocket ss = new ServerSocket(8989);
  whil(true){
	Socket s = ss.accept();
	s.setSoLinger(true,0);
	s.close();
 } 

半打开连接
 如果一方已经关闭或异常终止连接而另一方还不知道，这种TCP连接称为半打开(Half-Open)
 只要不打算在半打开连接上传输数据，仍处于连接状态的一方就不会检测另一方已经出现异常。

半关闭
  TCP连接的一端在结束它的发送后还能接收来自另一端数据的能力。很少应用程序使用。
