#类型变量
 TypeParameter:
  TypeVariable TypeBound(opt)
 类型变量就是类的变量，这个变量包含一个可选的界限，这个界限
以这种形式出现 extends C & I1 & I2,其中C表示一个类，I表示接口。
可以看到这个界限其实和类的定义是对应的,如:
	public class A extends C implements I1,I2{}
如果没有指定类型变量的界限就假定为Object型。

类型变量举例: (在方法上声明类型变量)
	class C{ //类
		void mC(){}
	}
	
	interface I1{//接口1
		void mI1();
	}
	
	interface I2{//接口2
		void mI2();
	}
	
	//声明一个类型变量T，这个变量具有类C和接口I1、I2相同的成员
	//当然，不包括私有变量
	<T extends C & I1 & I2> void test(T t){
   		t.mC();
		t.mI1();
		t.mI2();
   	}
注意：T是一个类型变量,T可以代表一个类型如String List List<Strig>等。
      类似List<String>是一个参数化的类型。 
	
	
#类型参数
   //声明类型变量的所有实体的公共接口。
   public interface GenericDeclaration{
	TypeVariable<?>[] getTypeParameters();
   }

     实现这个接口的类型，可以获取定义在该类型上的TypeVariable(类型变量,如T) 
   目前实现这个接口的有Class、Constructor、Method三个类型，也就是说我们可
   以拿到在这三个类型上定义的类型变量。
     比如Class类型，它实现TypeParameters()的时候肯定需要用到类文件中的内
   容，从类文件中拿到这些类型变量(如K,V)同理其他两个类型都需要用到类文件。

 参数化类型包含一个类或接口名称C,以及实际的类型参数列表<T1,,Tn>
 例如:
	Vector<String>
	Map<String,String>
 带有界通配符的参数化类型：
	List<? extends Object>
    List<? extends E> //E被定义的类型变量 

#类型编译时会被擦除

#变量共有7种
 1.类变量是在类中使用static声明的字段，或者接口中得字段。当准备好类或接口
   时，就会创建类变量并将其初始化默认值。 
 2.实例变量是在类中不使用关键字static声明的字段。当创建好类实例后，对应的
   类变量就会被创建并被初始化默认值。
 3.数组元素是未命名的变量。
 4.方法参数
 5.构造函数参数
 6.每当catch子句或try语句捕获一个异常时，就会创建一个异常处理程序参数。
 7.局部变量

#在使用变量的值之前，程序中得每个变量都必须有一个值。
 每个类变量，实例变量或数组元素都会在创建的时候用默认值初始化。
 在使用局部变量之前，必须通过初始化或复制显示地为其赋值。

#方法调用装换不包括作为复制转换一部分的整形常量的隐式收缩。
 因为会让重载方法产生歧义，例如：
	static int m(byte a,int b){return a+b}
	static int m(short a,short b){return a+b}
	public static void(String args[]){
		m(1,2); //编译时错误
	}

#方法签名
 方法签名用方法名称和参数列表组成，不包括返回值,例如：
   public int move(int x,char y){}
 改方法的签名为: move(int,char)

#默认修饰符的访问范围
 如果没有指定访问修饰符public、protected、private中得任何一个，则可以
在整个包内访问类成员或构造函数，包外不行(包外子类也不行)。

#protected修饰符
 被该修饰符修饰的类成员，可以被包内被访问，包外子类也可以访问。

#如果泛型类是Throwable得直接或间接子类，则会发生编译时错误。
 由于Java虚拟机的补货机制仅适用于非泛型类，因此需要这种限制。

#嵌套类或内部类引用的非自己的局部变量时，那些局部变量必须为final
 内部类可以直接引用成员变量，该变量不需要为final

#构造函数、静态初始化语句和实例初始化语句都不是成员，因此都不能被继承。

#被static修饰的字段称为类变量，未用static修饰的字段称为实例变量。

#static方法不能被一个实例方法重写,也不能被static方法重写(override)。
  实例方法重写静态方法会编译错误：
     class Father{
	public static void bg(){}	
     }
     class Sub extends Father{
     	public void bg(){}   //编译时错误
     }
  静态方法也不可以重写静态方法：
     class Sub{
	@override     
     	public static void bg(){} //编译时错误
     }
  但是子类静态方法可以隐藏父类静态方法：
     class Sub{
     	public static void bg(){}  //隐藏父类方法，不是重写
     }
  对于隐藏的解释：
  就是说Sub的bg()方法和父类Father的bg()方法没有关系，具体调用哪个方法是看
  谁在引用它。
    Father f = new Sub();
    Sub s = new Sub();
    f.bg(); //调用的是父类的方法
    s.bg(); //调用的时子类的方法
  对于上面的代码，如果两个方法都是实例方法，那么就是重写，因为实际实例对象
  是Sub实例，所以调用的就是Sub得方法。

#jvm方法调用相关的指令集
  例子代码：
	interface I{
		public void inter(){}
	}
	
	class Sub implements I{
		public static void sta(){}
		public void vir(){}
		public void inter(){}
	}

  invokestatic		//调用类方法(静态绑定，速度快)
	例如：Sub.sta(),会编译成静态绑定   

  invokevirtual		//调用实例方法(动态绑定)
	例如：Sub sub = new Sub();
	      sub.vir(); 该调用会编译成动态绑定

  invokespecial		//调用实例方法(静态绑定,速度快 如调用构造函数)
	例如：Sub sub = new Sub(); 会编译成静态绑定

  invokeinterface	//调用引用类型是interface的实例方法(动态绑定)
	例如：I subI = new Sub();
	      subI.inter(); 会编译成动态绑定

  invokedynamic		//JDK7引入，为了支持动态语言的方法调用
 异常的指令都会有指令操作数，这里省略了。

#注释类型 annotation
  注释类型声明不能是泛型。
  不允许使用extends子句(注释类型隐式扩展annotation.Annotation)
  方法不能有任何参数。
  方法声明不能有throws

#注释类型中声明的方法的返回类型，只能是以下类型：
  基本类型之一。
  String、Class和Class的任何调用?
  枚举类型。
  注释类型或上述类型之一的数组。
  多维数组不行。

#注释例子：
  @interface Demo{
 	public String name() default "默认";
  }

#虚拟机启动过程
  1.加载类
  2.链接:
	验证:验证字节码对错
	准备:准备分配有虚拟机内部使用的静态存储区和数据结构,如方法表
	解析:把该类引用的其他类或接口的符号，进行检查或替换。
	    解析再链接时时可以选的，可以再以后实际进行符号调用的时候
            在进行解析。所以有时候可能会看到NoSuchMethodError这种异常。
	    比如A、B两个类，A调用B的某个方法，后来B删掉了该方法，俩个
	    类在加载链接的时候没做符号解析，那么会在实际调用的时候做
	    符号解析，结果发现没有那个方法。
  3.初始化:
	初始化之前必须初始化它的直接超类,不包括接口。
	接口初始化之前不必初始化它的超接口.
  4.调用main方法

#类实例化过程：
   例子：
	class Point{
		int x,y;
		Point(){x=1;y=1;}
	}
	class ColoredPoint extends Point{
		int color = 0xFF00FF;
	}
	
	class Test{
		public static void main(){
		    ColoredPoint cp = new ColoredPoint();
		    System.out.println(cp.color);
		}
	}
   步骤：
   1.为ColoredPoint分配空间
   2.初始化所有字段成他们的默认值(这个例子中都是0)
   3.开始调用ColoredPoint无参的构造函数,该过程会递归地调用超类的构造函数。
     Object(){} --> Point(){} --> ColoredPoint构造函数体
   4.初始化完成

#编译时(static)常量(final)带来的副作用
   class Flags{
      final static boolean debug = true;
   }
   class Test{
   	public static void main(String args[]){
		if(Flags.debug){
			System.out.println("debug is true");
		}
	}
   }
   上面的代码输出的结果如下:
     debug is true
   假定对类Flags创建新版本:
     class Flags{
	final static boolean debug=false;
     }
   然后重新编译Flags类，不编译Test类，一起运行新德二进制代码与Test现在
   的二进制代码,则产生如下输出：
     debug is true
   因为debug是一个编译时常量，在Test的二进制代码中不会产生一个指向类Flags
   的引用。

#运行时，方法调用需要的步骤：
   1.一个目标引用可以被计算(如果有必要，static方法没有目标引用)
   2.参数表达式倍计算
   3.检查要被调用的方法的可访问性
   4.定位要被执行的方法的实际代码
   5.创建新德激活帧

#共享变量
   所有的实例字段、静态字段和数组元素都存储在对内存中。
   对于同一个变量的两个操作，如果至少有一个操作是写，则会产生冲突。


#finalize方法
 当一个对象准备被释放的时候，垃圾回收器会仅调用一次该方法。
 在下一次垃圾回收动作发生时，才会真正回收该对象。
 对象的整个声明周期只会调用一次.
 
 垃圾回收器只回收由new分配的内存，如果某个对象通过非new(比如jni)
 的方式获取了一块内存。这种情况可以用该方法。

#类的初始化过程
  1.加载类
  2.为static设默认值
  3.按顺序初始化static变量和执行static块(类加载完后不一定立即执行)
  4.按顺序执行成员变量和成员代码块({//code})
  5.执行构造方法(如果有new)

#happens-before
 1.If x and y are actions of the same thread and x comes before y in program
   order,then hb(x,y).
  如果x和y在同一个线程中,且x顺序上先与y,那么x先行发生于y。

 2.There is a happens-before edge from the end of a constructor of an object
  to the start of a finalizer for that object.


 3.If an action x synchronizes-with a fllowing action y,then we also have hb(x,y).


 4.If hb(x,y) and hb(y,z), then hb(x,z).
  如果x先行发生于y,y先行发生z,那么x先行发生于z。

 1.An unlock on a monitor happens-before every subsequent lock on that monitor.
  在一个监视器上的解锁操作,happens-before后续在该监视器上的加锁操作。
	
 2.A write to a volatile field happens-before every subsequent read of that filed.
  一个对volatile字段的写操作,先行发生于后续对他的读操作。  
 
 3.A call to start() on a thread happens-before any actions in the started thread.
  对一个线程的start()操作,先行发生于该线程启动后在该线程内部做的任何操作。

 4.All actions in a thread hapens-before any other thread successfully returns 
   from a join() on that thread.
  线程A中所有操作先行发生于,在其他线程中成功调用线程A的join方法后的动作。

 5.The default initialization of any object happens-before any other actions(other
   than default-writes) of a program.
  一个对象的默认初始化操作,先行发生于其他操作。 
 
    

 
 
 
