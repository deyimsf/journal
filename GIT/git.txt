#创建版本库
 $ git init

#创建裸版本库
 $ git --bare init

#在存在的版本库中拉取数据
 $ git pull 版本库[https://github.com/deyimsf/journal.git]

#克隆版本库
 $ git clone https://[username:passport@]github.com/deyimsf/journal.git
 //该命令可以认为是git init & git pull的结合版

#工作区和暂存区比较
 $ git diff

#暂存区和HEAD比较
 $ git diff --cached

#工作区和HEAD比较
 $ git diff HEAD

#查看某个文件的历史版本
 $ git log --oneline   //用一行显示历史提交
 $ git show 144b50:C/c.txt //显示144b50这个提交版本的C/c.txt这个文件的内容
 $ git show HEAD:C/c.txt

#重置命令三个动作
 1.替换引用的指向
 2.替换暂存区。替换后，暂存区的内容和引用指向的目录树一致。
 3.替换工作区。替换后，工作区的内容变得和暂存区一致，和HEAD志向的目录树内容一致
#重置命令格式
 $ git reset [--soft | --mixed | --hard] <commit>
  
 例子1：
 	$ git reset --hard HEAD
 该命令会执行所有动作，会将引用执行HEAD，暂存区的内容变为HEAD指向目录树的内容，
 工作区的内容会和暂存区的一致。

 例子2：
	$git reset --soft 342bf3
 该命令将当前引用指向342bf3这个提交，其它不变。

 例子3：
	$git reset --mixed(默认) 342b3f
 该命令执行1、2两个动作。

#里程碑命令
 $ git tag  
 不带参数则是直接查看里程碑

#查看在暂存区和工作树文件的信息：ls-files
 $ git ls-files  //-c参数只列出当前目录下的文件、其他参数未验证 
  -c|--cached	:显示工作区中提交到暂存区中得文件
  -d|--deleted  :显示在工作区中删除的文件，但暂存区中还在
  -m|--modified :显示工作区和暂存区内容不一样的文件
  -o|--others	:展示不再暂存区的文件 
  -u|--unmerged :显示不能merge的文件,就是有冲突的文件

#查看提交记录
 $ git log --graph --pretty=raw  -3

#.git/refs
 heads  //该目录下是本地版本的mster引用
 remotes //该目录下是远程版本的master引用
 tags

#获取远程版本库的内容
$ git fetch

#merge相关操作
 //将远程分支origin/master合并到当前分支,这个远程分支是从远程拉倒本地的分支
  $git merge origin/master

 //将本地master合并到本地test_s分支
  $git checkout test_s   //切换test_s为当前分支
  $git merge master 

#查看fetch到本地的远程分支的内容
 $git checkout origin/master

#查看文件内容都是谁提交的
$ blame filename

#当有合并冲突的时候.git目录下会出现以下文件
 ./git/MERGE_HEAD  记录所合并的提交的ID(origin/master)
 ./git/MERGE_MODE  表示合并状态
 ./git/MERGE_MSG   记录合并失败的文件
#暂存区中会同时记录冲突文件的多个不同版本
$ git ls-files -s
100644(属性)  ea12387877ea7a8e798a7e98a7e89a78e(sha1哈希)  1  fileName
100644(属性)  34c435c43c54c54c54c54e98a7e82e0ea(sha1哈希)  2  fileName
100644(属性)  453c5ccc554ea7a8e7987e98a7e89a24e(sha1哈希)  3  fileName
#编号为1的暂存区保存冲突修改之前的副本,即双方共同的祖先版本
$ git show :1:fileName
#编号为2的暂存区保存当前文件在当前分支中修改的副本
$ git show :2:fileName
#编号3暂存区保存该文件在远程版本(分支)中修改的副本
$ git show :3:fileName
#冲突文件的特殊标识
 <<<<<<<(七个小于号)和=======(七个等号)之间的内容是当前分支更改的内容。
 =======和>>>>>>>之间的内容是要合并的版本(分支)更改的内容
#手动解决冲突
 删除冲突文件的特殊标识，提交完后会看到./git/MERGE_*三个文件就消失了。
 冲突文件在暂存区中得三个副本也都消失了(这个在git add后就清除了)。
 //实际上即使你不删除特殊标识，而是直接git add 然后git commit那么git就
 //认为你已经修改冲突了。
#半手工解决冲突
$ git mergetool


#config配置了本地git的一些信息
 [user]
	name = masf     //user.name = masf 
	email = masf@jd.com 	//user/email = masf@jd.com
 [core]
	repositoryformatversion = 0

 [remote "origin"] //远程版本库地址
	url = http://[user]:[password]@source.cc.com/app/dynamic
    // + 代表强制进行引用替换
    // 冒号前面代表远程版本库的所有分支,冒号后面代表复制到本地的远程分支目录
    // 当使用git fetch origin时,就代表使用了如下命令:
	//   $git fetch origin +refs/heads/*:refs/remotes/origin/*
    //   将远程版本库的所有分支复制为本地的远程分支
	fetch = +refs/heads/*:refs/remotes/origin/*
 [branch "master"] //本地版本库地址
	remote = origin
	// 把从远程版本库拉取下来的master合并到本地的refs/heads/master分支中
	merge = refs/heads/master 

#~/.gitconfig 全局config配置文件
 [user]
	name = masf
	email = masf@163.com	

#对于http协议,如果要让git记住密码,可以如下设置
 $git config --<global|system|local> credential.helper store [--file=git-credentials]
 
 如果是global那么会在 ~/.gitconfig 下添加如下内容
	[credential]
		helper = store
 这个配置会让所有的git版本库在首次输入密码的时候被记住,并放在--file指定的文件中，
 且该文件默认放在 ~/.git-credentials文件中,内容如下
 	http://<user>:<password>@jd.com
	https://<user>:<password>@github.com
 
#创建本地分支
 $git branch	test_b
 $git checkout	test_b

 等同如下命令
 $git checkout -b test_b

#删除本地分支
 $git branch -<d|D> test_b

#查看本地分支
 $git branch
  * brand_b
    brand_s
    master

 本地分支保存在.git/refs/heads下

#查看远程分支
 $git branch -r
   origin/HEAD -> origin/master
   origin/brand_b
   origin/master
 
 远程分支保存在.git/refs/remotes/origin下

#创建远程分支
 如果从远程版本库拉回来的项目还没有分支,那么我们就可以创建一个远程分支,步骤如下:
 1.创建一个本地分支
   $git brach test_b
 2.将本地分支推送到远程版本库
   $git push origin test_b 

#分支追踪
 当我们从远程版本库拉回来一个有很多分支的项目时,远程分支会放到.git/refs/remotes/origin下 
 为了可以在某一个远程分支上工作,我们需要基于该远程分支创建一个本地分支,对于1.6.6以上版本   

	$git checkout brand_b  

 这个命令会创建一个本地分支brand_b,然后将其跟踪到远程分支.git/refs/remotes/origin/brand_b上
 这时候config文件会多出如下内容:

	[branch "brand_b"]
    remote = origin
    merge = refs/heads/brand_b 
 
 如果本地已经存在一个叫brand_b的分支,可以用下面的命令创建远程分支的本地跟踪
  
    $git checkout -b brand_ss origin/brand_b

 该命令的意思是基于远程分支brand_b创建一个本地分支为brand_ss的跟踪。
 随后config文件会多出如下内容:
	[branch "brand_ss"]
	remote = origin
	merge = refs/heads/brand_b

#分支当前commit版本号存放地址
 所有分支的当前版本号都存在目录.git/refs/heads下
	master   //保存主分支的commit版本号
	test_b   //保存test_b分支的commit版本号 
	test_a
 不管是本地分支还是远程分支,都放在该目录下,但是对于本地分支
 config中没有描述信息
  
#添加远程版本库
 $git remote add <origin> <url>
 $git remote add ccc ddd

 添加后config文件增加内容如下
 [remote "ccc"]
    url = ddd 
    fetch = +refs/heads/*:refs/remotes/ccc/*

 一般默认我们会有一个origin的
 [remote "origin"]
	url = http://sdfds.23.com
	fetch = +refs/heads/*:refs/remotes/origin/*

#删除远程版本库(只删本地配置文件)
 $git remote rm <origin>

#获取但不合并
 $git fetch <origin>

#获取并合并到本地分支
 $git pull <origin>

#推送到远程版本库
 $git push <origin> [master]

 //将本地分支推送到远程分支中
 $git push origin brand_b:brand_b
 //如果当前分支就是brand_b,并且brand_b就是远程分支的一个跟踪,那么
 //如下命令同上?
 $git push 

 //将本地分支直接推送到远程master中
 $git push origin brand_b:master

 //删除远程分支
 $git push origin :brand_b

#忽略文件
 如果想忽略某些文件,可以编写以下文件
 .git/info/exclude




