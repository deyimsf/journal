#创建版本库
 $ git init

#创建裸版本库
 $ git --bare init

#在存在的版本库中拉取数据
 $ git pull 版本库[https://github.com/deyimsf/journal.git]

#克隆版本库
 $ git clone https://[username:passport@]github.com/deyimsf/journal.git
 //该命令可以认为是git init & git pull的结合版

#工作区和暂存区比较
 $ git diff

#暂存区和HEAD比较
 $ git diff --cached

#工作区和HEAD比较
 $ git diff HEAD

#查看某个文件的历史版本
 $ git log --oneline   //用一行显示历史提交
 $ git show 144b50:C/c.txt //显示144b50这个提交版本的C/c.txt这个文件的内容
 $ git show HEAD:C/c.txt

#重置命令三个动作
 1.替换引用的指向
 2.替换暂存区。替换后，暂存区的内容和引用指向的目录树一致。
 3.替换工作区。替换后，工作区的内容变得和暂存区一致，和HEAD志向的目录树内容一致
#重置命令格式
 $ git reset [--soft | --mixed | --hard] <commit>
  
 例子1：
 	$ git reset --hard HEAD
 该命令会执行所有动作，会将引用执行HEAD，暂存区的内容变为HEAD指向目录树的内容，
 工作区的内容会和暂存区的一致。

 例子2：
	$git reset --soft 342bf3
 该命令将当前引用指向342bf3这个提交，其它不变。

 例子3：
	$git reset --mixed(默认) 342b3f
 该命令执行1、2两个动作。

#里程碑命令
 $ git tag  
 不带参数则是直接查看里程碑

#查看在暂存区和工作树文件的信息：ls-files
 $ git ls-files  //-c参数只列出当前目录下的文件、其他参数未验证 
  -c|--cached	:显示工作区中提交到暂存区中得文件
  -d|--deleted  :显示在工作区中删除的文件，但暂存区中还在
  -m|--modified :显示工作区和暂存区内容不一样的文件
  -o|--others	:展示不再暂存区的文件 
  -u|--unmerged :显示不能merge的文件,就是有冲突的文件

#查看提交记录
 $ git log --graph --pretty=raw  -3

#.git/refs
 heads  //该目录下是本地版本的mster引用
 remotes //该目录下是远程版本的master引用
 tags

#获取远程版本库的内容
$ git fetch

#本地分支和远程分支合并
$ git merge origin/master

#查看文件内容都是谁提交的
$ blame filename

#当有合并冲突的时候.git目录下会出现以下文件
 ./git/MERGE_HEAD  记录所合并的提交的ID(origin/master)
 ./git/MERGE_MODE  表示合并状态
 ./git/MERGE_MSG   记录合并失败的文件
#暂存区中会同时记录冲突文件的多个不同版本
$ git ls-files -s
100644(属性)  ea12387877ea7a8e798a7e98a7e89a78e(sha1哈希)  1  fileName
100644(属性)  34c435c43c54c54c54c54e98a7e82e0ea(sha1哈希)  2  fileName
100644(属性)  453c5ccc554ea7a8e7987e98a7e89a24e(sha1哈希)  3  fileName
#编号为1的暂存区保存冲突修改之前的副本,即双方共同的祖先版本
$ git show :1:fileName
#编号为2的暂存区保存当前文件在当前分支中修改的副本
$ git show :2:fileName
#编号3暂存区保存该文件在远程版本(分支)中修改的副本
$ git show :3:fileName
#冲突文件的特殊标识
 <<<<<<<(七个小于号)和=======(七个等号)之间的内容是当前分支更改的内容。
 =======和>>>>>>>之间的内容是要合并的版本(分支)更改的内容
#手动解决冲突
 删除冲突文件的特殊标识，提交完后会看到./git/MERGE_*三个文件就消失了。
 冲突文件在暂存区中得三个副本也都消失了(这个在git add后就清除了)。
 //实际上即使你不删除特殊标识，而是直接git add 然后git commit那么git就
 //认为你已经修改冲突了。
#半手工解决冲突
$ git mergetool
