
#gdb安装on mac
 ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
 brew install https://raw.github.com/Homebrew/homebrew-dupes/master/gdb.rb

#使用gdb调试的程序需要在编译的时候加上 gcc -c参数
 $ gcc -g test.c aa.c
 //mac上需要先gcc -g -c test.c aa.c生成目标文件
 //然后再gcc test.o aa.o这个样用s(step)的时候才能进入子源文件
 //不知道为什么

#启动gdb
 $ gdb -tui a.out

 调试程序的时候也可以先启动gdb,然后再attach某个进程号
 $ gdb -tui ./sbin/nginx  // 关联上程序(nginx)源码
 (gdb) attach <pid>

 也可以启动gdb时直接关联上源代码和pid 
 $ gdb -tui ./sbin/nginx  pid

#启动一个带参数的程序
 $ sudo gdb -tui ./nginx
 (gdb) set args -t
 (gdb) run
 上面的命令等同于 ./nginx -t


#查看设置好的运行参数
 (gdb) show args
 Argument list to give program being debugged when it is started is "-s reload".


#图形方式启动gdb
  $ gdb -tui a.out
  加tui方式debug源代码会展示在窗口的上方
 
  或者运行gdb后连续按键 ctrl+x和ctrl+a,也可以出现窗口,并且
  在tui模式下可以有四种窗口,在gdb中输入help layout可以看到
   
  改变窗口的布局在gdb中用下面的命令
   layout prev | next | <layout_name> 
   Layout names are:
   	 src   : 默认显示源文件
   	 asm   : 显示汇编窗口
   	 split : 显示汇编和源文件两个窗口
   	 regs  : 寄存器窗口
	

#查看代码
 (gdb) l	//该命令可以查看源代码
 (gdb) list aa.c:函数名|行号  //从aa.c这个文件的第一行开始看


#打断点
 (gdb) break [file:]函数名|行号


#条件断点 
 break <函数名|行号> if <condition>
 例子:
	 break main if i=100
 在main函数中,如果i值等于100则停住程序
	
#查看断点
 (gdb) info b|break


#删除断点
 (gdb) delete 5 | 5-10


#开始运行程序
 (gdb) run 	//这个时候会程序会停止在断点处


#打印变量
 (gdb) print i  //i是程序中得变量

#打印字全部字符串,不省略
 (gdb) set print element 0
 (gdb) p *str@len

#下一步
 (gdb) n|next	//执行下一句
 (gdb) s|step	//执行下一句，如果下一句是个方法则进入,前提是该方法有源代码

#显示程序的栈信息
 (gdb) bt    //可以看到当前执行的方法,以及停留在哪一行

#跳过断点继续执行
 (gdb) c	

#退出gdb
 (gdb) q

#通过地址查看内存值
 //命令格式
 (gdb) x/参数	
		x 按十六进制格式显示变量。
    	d 按十进制格式显示变量。
   	 	u 按十六进制格式显示无符号整型。
    	o 按八进制格式显示变量。
    	t 按二进制格式显示变量。
    	a 按十六进制格式显示变量。
    	c 按字符格式显示变量。
    	f 按浮点数格式显示变量。
		n 指定一个整数，表示显示几个单位
		b 以单字节表示一个单位
		h 双字节表示一个单位
		w 四字节表示一个单位
		g 八字节表示一个单位
 Format letters are o(octal), x(hex), d(decimal), u(unsigned decimal),
 t(binary), f(float), a(address), i(instruction), c(char) and s(string).
 Size letters are b(byte), h(halfword), w(word), g(giant, 8 bytes)

  例子:从某个地址开始,按字符格式显示变量
	  (gdb) x/3bc 0x10058009  //意思是从改地址开始显示3个单位(b,单字节)的内容
      (gdb) x/3hx 0x10058009  //从该地址开始,双字节表示一个单位，显示三个单位的十六进制内容


#gdb调试多进程
 set follow-fork-mode [parent|child] 
 parent: 表示gdb跟着主进程代码走(默认)
 child: 表示gdb跟着子进程代码走

 set detach-on-fork [on|off]
 on: 表示和fork分离(默认)
 off: 表示和fork分离 
 
 从上面的默认参数可知,默认gdb只调试主进程代码,只要主进程退出
 那么gdb也就调试完毕了。

 如果想只调试子进程,可以如下操作:
	set follow-fork-mode child 
 这样gdb就一直跟着子进程代码走,不再关心主进程

#查看正在调试的进程
 (gdb) info inferiors
  Num  Description     	 Executable    	   
* 2    process 1861    	 /export/servers/nginx/sbin/nginx 
  1    <null>  	       	 /export/servers/nginx/sbin/nginx 

  *号表示正在调试的进程,其中<null>表示这个进程已经退出了
  
#切换调试的进程
 (gdb) inferior <Num>


#查看当前调试程序的状态(是否在运行、进程号、被暂定原因l)
(gdb) info program
 

#设置观察点(WatchPoint)



