C语言的几种基本数据类型
 char 字符型，一个字节
 int 整形，通常反映所用机器中整数的最自然长度，至少16位
 float 当精度浮点
 double 双精度浮点
 
限定符
 short
 long
 signed
 unsigned

'\000' 用八进制表示一个字符 如'\013'
'\xhh' 用十六进制表示一个字符 如'\xb'

按位运算符
 &  按位与
 |  按位或
 ^  按位异或
 << 左移
 >> 右移
 ~  按位求反

C语言没有指定同一运算符的计算顺序
 例如x = f() + g(); 两个函数的计算顺序依赖于具体的编译器
C语言也没有指定函数参数的求职顺序
 printf("%d %d\n",++n,power(2,n)); 不确定++n先执行还是pwoer()先执行
a[i] = i++; 存在同样的问题

函数隐式声明
 如果函数没有原型声明，那么函数会在第一次出现的地方被隐式声明。
 被声明的函数返回值被假定为int型，但不对参数做类型假设。

函数的声明和定义必须一致，如果声明和定义在一个文件，则编译器会检查到该错误。
如果不在同一个文件，则无法检测到，这件会导致声明是int，定义且是其他类型(如double).
所以函数的声明和定义最好在一个文件中。

函数声明的一个例子
   int sum;
   //cc 这函数第一次出现，所以隐式声明为 int cc();
   //不对参数做假设.所以输入什么参数都可以.
   //注意：int cc(); int cc(void); 这两种声明是不一样的，
   //int cc()会把后边出现的第一个int cc(...){}视为定义
   //int cc(void) 只会把 int cc(){} 视为定义
   sum = cc("2.4");

   1) int cc(char a[]){}
   //如果1) 随后首先出现，那么1) 将被视为函数定义

   2) int cc(char a[], char b[]){}
   //如果2) 随后首先出现，那么2) 将被视为函数定义
 
   注意：1)和2)不可同时出现，因为名字相同，所以视为重复定义

   3) double cc(char a[] , char b[]){} 
   //如果3) 随后首先出现,那么3) 被视为重复声明, 并不会把这个函数看成一个定义。
   //因为前面隐式声明的类型是int,而这里是一个double
   //类似这样：int cc(); double cc();

   注意：函数声明时按照名字来确定是否已经声明；按照声明的类型和名字
         确定是否定义了函数。C语言中不会存在同名的函数。




