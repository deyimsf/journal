#如果对一个变量有多次赋值,那么优先顺序如下:
  命令行赋值优先级最高;
  Makefile自身的赋值次之;
  顶层Makefile传递过来的最低,上层Makefile传递过来的命令行除外;

#用make命令可以覆盖Makefile中指定的值
 例如:
  //-----------------Makefile-------------------
   LUA_INCLUDE_DIR = /usr/local/include 
   echo:
		@echo "LUA_INCLUDE_DIR=$(LUA_INCLUDE_DIR)"
  //--------------------------------------------
 
 当前文件下输入make,则输出
	LUA_INCLUDE_DIR=/usr/local/include
 如果make后加上参数,如:
	make LUA_INCLUDE_DIR=/abc
 则输出
	LUA_INCLUDE_DIR=/abc

#make查找xxxfile文件的顺序,Linux区分大写,Mac不区分
 1.GNUmakefile
 2.makefile
 3.Makefile
 
#Makefile的基本格式
 <target>:[<condition>]
 <Tab><command>
 target:目标(可以有多个,以空格分隔),用户自定义的字符,其中all是make自己的.
 condition:需要依赖的文件(可以有多个,以空格分隔),如果要换行可以使用\符号.
 Tab:tab制表符,不能用空格代替,每个command前面必须以这个开头。在makefile中
     只要以Tab制表符开头就会被当成命令解释。
 command:你要做的事情,比如gcc等.如果要换行可以使用\符号.

 例子: 编译一个.c文件 	
   //--------------------Makefile-------------
	all:main.o part1.o part2.o
		gcc main.o part1.o part2.o -o mybin
	
	main.o: main.c
		gcc -c main.c
	
	part1.o: part1.c
		gcc -c part1.c
	
	part2.o: part2.c
		gcc -c part1.c
   //-------------------------------------------
 在该文件所在的目录下执行不加参数的make命令,执行顺序如下:
	1)make命令在当前目录下找相应的xxxfile文件如果都没找到就报错.
	2)在xxxfile文件中找all这个目标,如果没有则执行第一个目标。
    3)查找all后面的三个文件是否存在,如果存在就执行下面的action。
      如果不存在,就把第一个main.o作为目标,查找文件中是否有该目标,
      如果有,就执行该目标并最终得到需要的main.o文件。
    4)得到main.o后就接着去处理part1.o和part2.o,方法和得到main.o一样。

#make命令
 -f:指定xxxfile,用它之后就不会选择默认的makefile了
 --file=xxx: 同-f
 --makefile=xxx: 同-f
 -d: 调试makefile文件,将文件的执行过程打印出来.
 -p: 查看make支持的隐式规则,比如从.c到.o的转换(.c.o:)


 例子:从.c到.o的隐式转换
    all: main.o part.o
		gcc main.o part.o -o mybin
    
    main.o: main.c
	part.o: part.c
 由于make支持.c.o:转换,所以只要xxx.c文件存在,则可以执行成功.

#make中的变量
  :=      该符号用来定义变量
  $()|${} 这两个符号用来展开变量
 
 例子:
	CC		:=	gcc		//编译命令的变量
    LD		:=  gcc	    //链接命令的变量
    CFLAGS  :=  -g -W -std=c99 -c //编译用到的参数
    LDFLAGS :=  -lcurses  //链接用到的参数

    all: MyC

	Myc: main.o part.o
		$(LD) $(LDFLAGS) main.o part.o -o my

    main.o: main.c main.h
		$(CC) $(CFLAGS) -o main.o main.c
    part.o: part.c part.h
		$(CC) $(CFLAGS) -o part.o part.c

#make中常用的自动变量
 自动变量可以自动取用一条规则中目标和条件的元素.
 $@		目标的文件名
 $<		第一个条件的文件名
 $?		时间戳在目标之后的所有条件(文件),并以空格隔开
 $^		所有条件的文件名,以空格隔开,且排除了重复的条件(文件)
 $+		与$^类似,没有排重
 $*		目标的主文件名,不包含扩展名?

 例子:
	all: MyC
	MyC: main.o part.o part.o
		@echo \$$@=[$@]
		@echo \$$\<=[$<]
		@echo \$$?=[$?]
		@echo \$$^=[$^]
		@echo \$$+=[$+]
		@echo \$$*=[$*]
    main.o: main.c
		gcc -c main.c
	part.o: part.c
		gcc -c part.c

 输出结果如下:
	$@=[MyC]
	$<=[main.o]
	$?=[main.o part.o]
	$^=[main.o part.o]
	$+=[main.o part.o part.o]
	$*=[]
 
#make中的模式规则
   CC		:=  gcc
   LD		:=  gcc
   CFLAGS	:=  -g -W -std=c99 -c
   LDFLAGS	:=	-lcurses
	
   all:TinyEdit
   
   TinyEdit: main.o line.o
		$(LD) $(LDFLAGS)    $^     	  -o      $@
		#gcc  -lcurses  main.o line.o -o TinyEdit
 
   %.o:%.c  //模式规则中的目标target与条件condition是一对一关系
		$(CC) $(CFLAGS) 		-o  $@     $<
   #main.o: main.c 
		#gcc -g -W -std=c99 -c	-o  main.o main.c
   #line.o: line.c
		#gcc -g -W -std=c99 -c  -o  part.o part.c 
  
 例子中的模式规则(%.o:%.c)百分号代表任意字符.
 它在工作的时候首先会用模式规则的目标(%.o)和当前执行的目标(TinyEdit)
 的条件进行匹配,之后会用匹配到的部分,一对一的替换掉模式规则中条件模式
 的百分号。
 
 从上面的例子可以看到,模式规则匹配完后就构成了一个显示的模式。
 实际上之前说到的隐式规则其实就是因为make内置了很多的模式规则,所以
 如果遇到了不支持的隐式规则,我们就可以通过模式规则手动创建。另外
 因为模式规则(%.o:%.c) 变量(CC LD CFLAGS LDFLAGS)等已经被make内置了,
 并且内置模式中也会用到这些变量,所以删掉这个模式规则得到结果一样。
 也是一样的。
  
 注意:
	用make -p 命令可以查看都内置了那些变量和模式规则.

#虚假目标 .PHONY
 首先在make中条件condition一定是文件,如果找不到这个文件则把条件看
 成目标进行查找,找到之后就会执行目标.但是如果项目中存在一个文件和
 这个目标同名,那么这个目标就不会被执行,为了解决这个问题,make中引入
 了假目标.PHONY。它的作用就是不把它后面的条件看成文件.
 例如:	
	.PHONY: install uninstall
	
	install: 
		@echo "hello install";
	
	uninstall:
		@echo "hello uninstall";

 执行make install,如果当前目录中有install文件,并且我们没有.PHONY
 这个假目标,则就不会输出hello install.

#路径搜索VPATH和vpath
 VPATH 用来指定用于搜索文件的路径
 例如:
	VPATH	:= src	include
	
	all:my
	
	my:main.o part.o
		@echo "hello"
  
    main.o:main.c
	part.o:part.c

 执行make后,如果在当前目录找不到main.c等文件就会去VPATH指定目录去
 找,并且只匹配第一个找到的.

 vpath 同VPATH但是这个更灵活,可以按模式指定
 例如:
	vpath %.c src
	vpath a.h include

    all:my
	
	my:main.c part.c
		@echo "hello"
 执行过程同样是先找当前的,然后可以分开指定.c的从src目录找,a.h从include目录找。

#文件包含include
 格式:
	include file1 file2 ...
 当make遇见include指令后回去读取后面指定的文件,如果找不到只是抱怨一下,并继续
 读后面的文件,最后在把没找到的文件作为目标去执行.

 例如:
   //-----------common.mk文件------------
	  CC		= gcc
	  CFLAGS	= -g -w
   //------------------------------------
 
   //----------define.mk文件-------------
	  CFLAGS	+= -std=c99    //+=追加
   //------------------------------------

   //-----------Makefile文件-------------
	 include common.mk define.mk
	 all:my
	
	 my:main.c part.c
		$(CC) $(CFLAGS) $^ -o my
   //------------------------------------

 注意: include指令找文件顺序
	如果是绝对路径,就直接读绝对路径。如果给的是相对路径就先找相对路径,如果
    找不到就按照make -I 指定的路径去找。如果还没找到就把inlude的文件作为目标
    去执行。

#命令command
 Makefile中命令只能单行处理shell脚本,也就是说一个命令只能一行写完。但是
 可以有多行命令,如果想换行只能使用 \ 符号.
 命令只能出现在规则和变量的赋值中.

 例如:
	list.txt:     //将a b 目录中内容输出到list.txt文件中
		@echo	"start"
		@for d in a b;  \
		 do			    \
		 	echo $$d/*; \
		done> $@	    \   //$@代表规则的目标,这里就是list.txt 

 例如:变量赋值
	FILE_LIST	:=	`for d in a b; do echo $$d/*; done`

#命令修饰符
 @  要求不输出命令
 -  要求命令忽略错误
 +  要求只显示命令,不去执行

#变量赋值符号
 :=  经简单扩展的变量
   这个符号和平常的赋值符号没什么区别
   比如:
	  VAR	:= $(CC) -c
   如果CC这个变量有值,那么VAR就是CC的值加上 -c
   如果CC没有定义,那么VAR就是空格<space> 加上 -c

 = 经递归扩展的变量
   这个符号只是把右边的值不经计算的搬给左边
   例如:
	  CC	= 	gcc
	  VAR	= 	$(CC) -c
   这里VAR变量的值并不是 gcc -c而是$(CC) -c,只有在实际使用时才是前者.
      echo $(VAR)		-->gcc -c
      CC 	=	acc
      echo $(VAR)		-->acc -c
   从上面的例子可以看到,变量的赋值类似于"懒加载"

 ?= 附带条件的变量赋值运算符
    左边的变量被定义过就赋值,没有就跳过		

 += 变量拼接符号
	
#目标专属变量
 类似于局部变量,只有某个目标可以用
 例子:
	CC		:= gcc
	CFLAGS	:= -std=c99 -c

	all:my
	
	my:CFLAGS += -g    //执行这个目标的时候增加一个变量
	my:main.c part.c
		$(CC) $(CFLAGS) main.c part.c -o my

#make的专有变量
 MAKE_VERSION	GNU make的当前版本号
 CURDIR			make的当前工作路径
 MAKEFILE_LIST	make所读入的所有Makefile文件的列表,包括include的
 MAKECMDGOALS   在make命令中给定的要生成的目标
 VARIABLES		所有已定义的变量名列表,不包括目标专有变量

#宏和函数
 宏定义:
 	define cc
		@echo "hello"
 	endef
 使用:
	$(cc)

 函数定义:
	define cc
		@echo "hello $1"
    endef
 使用: 用make的内置函数call调用自定义的函数
	$(call cc,"world")

#条件指令,和C的预编译指令很想
 if-condition
	...
 else
	...
 endif

 if-condition: ifdef、ifndef、ifeq、ifneq




 
	 
	






