#hello world
 print("Hello World");

#命令行方式执行lua: lua[options] [script [args]]
 -e:直接将命令传入lua并执行
  $ lua -e "print('hello world')" --> hello world
 
 -l:加载一个文件并执行(默认)
    ----------->test.lua<-----------
		print("hello world");
  	-------------------------------- 
  $ lua -l test.lua

 -i:进入交互模式
 
 _PROMPT:该变量可更改交互模式的提示符,例如
 $ lua -i -e "_PROMPT='lua>'"
 lua>

#全局变量arg用于存放Lua的命令行参数
 lua用所有参数构造arg表,脚本名索引为0，脚本后从1开始，脚本后从-1开始
 	------------>test.lua<-----------
		print("arg[-1]="..arg[-1]);
		print("arg[0]="..arg[0]);
		print("arg[1]="..arg[1]);
	---------------------------------
 $ lua -e "c=c" test.lua a b
   arg[-1]=c
   arg[0]=test.lua
   arg[1]=a

#获取数据类型
 print(type("hello world"));		-->string
 print(type(20*3));			-->number //lua中数字都是double类型的
 print(type(print));			-->function
 print(type(true));			-->boolean 
 print(type(a));			-->nil
 print(type({}));			-->table

#可以用[[]]表示字符串，里面的内容不用转义
 lua> page=[[<html> </htm> "a"]] 
 
 lua> io.write(page);

#逻辑运算符 and or not
 false和nil是假，其它为真
 a and b	--如果a为false，则返回a,否则返回b
 a or b		--a为true返回a，否则返回b

#Lua中除了nil和false都是true

#长度运算符(#)
 作用在字符串上面代表字符的长度
 例如:
	locat str = "123";
	print(#str);  -->3
 
 作用在一个表上,表示表的长度
 例如:
	t={12,432,,32}
	print(#t);	  -->4

#表的构造
 days={"sunday","monday","tuesday"}
 等价于
 days={[1]="sunday",[2]="monday",[3]="tuesday"}

#表table
 table的一般定义法:
	local tab = {[key1]=value2,[key2]=value2}
 其中key可以是除了nil的任何lua类型,value可以任意lua类型

 例子1:key是字符串
    local tab = {["name"]="abc",["age"]=23};
	print(tab.name); 	-->abc
	print(tab["name"]); -->abc
 另外,lua对于key是字符串的表,创建的时候可以省略中括号和双引号
	local tab = {name="abc",age=23};
	print(tab.age);    -->23
	print(tab["age"]); -->23

 例子2:key是数字
	local tab = {[1]="a",[2]="b"};
	print(tab[1]); -->a
 lua对于key是数字的表,还可以省略其key值,且key值从1开始
	local tab = {"a","b"} 
	print(tab[1]); -->a
 
 例子3:key是表、函数
	local t = {};
	local tab = {[t]="a"};	
	print(tab[t]); -->a


	function fa() end;
	local f = function() end;
	local tab = {[f]="a",[fa]="b"};
	print(tab[f]);   -->a
	print(tab[fa]);  -->b

#赋值
 a,b,c = 0,1;
 print(a,b,c);   -->0,1,nil

#控制语句
 if xxx then ... end
 if xxx then ... else ... end
 if xxx then ... elseif xxx then ... else ... end

 while xxx do 
   ...
 end

 repeat
	...
 until xxx

#for语句
 for var=exp1(初始值),exp2(终止值),exp3(step) do
	...
 end

 for i,v in ipairs(array) do
	...
 end
 //i是数组的第几个，v是数组值

 for k,v in pairs(table) do
	...
 end
 //k是表的key，v是表的值

#可变参数
 function select(...)
	local a,b,c = ...;
	print({...}); //传过来的参数放在表中
    for i,v in ipairs({...}) do
		print(i.."--"..v);
	end
 end

#函数排序
	net={"a","b","c"};
  	print(net[1].."--"..net[2].."--"..net[3]);  -->a b c
  	
  	table.sort(net,
  	           function(a,b)
  	               return (a>b);
  	           end
  	)
  	print(net[1].."--"..net[2].."--"..net[3])   -->c b a
 
#当一个函数内部嵌套另一个函数定义时,内部的函数体可以访问外部函数的局部变量
 ,这种特征我们称作词法定界(闭包)。

#闭包
	function nc()
		local i = 0;
		return function()
				 i=i+1;
				 return i;
			   end
	end   

	nc();		 -->function: 0x7fd9024066a0(匿名函数的地址) 
	c1 = nc();   --将返回的匿名函数赋值给c1
    print(c1()); -->1
    print(c2()); -->2
    
#利用闭包重写open函数
	do
		local old_open = io.open
		io.open=function(filename,mode)
					if access_ok(filename,mode) then
						return old_open(filename,mode);
					else
						return nil,"access denied";
					end
				end
	end

#闭包是一个内部函数，它可以访问一个或者多个外部函数的外部局部变量。
 每次闭包的成功调用后，这些外部局部变量(upvalue)都保存他们的值。

#创建闭包的代价比创建table小；处理闭包要比处理table速度快.

#dofile加载一个文件并执行

#loadfile加载一个文件，将其编译成中间代码并返回编译后的chunk作为一个函数，不执行代码。
 lua中的函数定义发生在运行时的赋值而不是发生在编译时。
	 --------------------->foo.lua<------------------------
		function aa()
			print("aa");
		end
	
		function bb()
			print("bb");
		end
 	------------------------------------------------------
 lua> f,v = loadfile("foo.lua");  --只是加载foo.lua文件
	 //如果加载错误，f=nill、v=错误信息
 lua> f();	--定义aa bb,之后aa、bb就可以使用了
 lua> aa();	-->aa
 lua> bb(0; -->bb

 和loadstring一样都不会抛出错误，如果发生错误他们将返回nil和编译错误信息
 如:
	print(loadstring("i i"))	-->[string "i i"]:1: syntax error near 'i'
 
#loadstring与loadfile类似，只不过它从一个串中读入chunk
 lua> f = loadstring("i=i+1");
 //f是一个函数，只有调用时才执行;
 lua> i = 0;
 lua> f(); print(i);  -->1

#lua把每一个chunk都作为一个匿名函数处理。
 例如：
	chunk "a=1";
	loadstring("a=1");
 返回与其等价的函数:
    function () 
		a=1
	end

#require函数，和dofile类似，编译并执行程序
 1.require会搜索目录加载文件
 2.require会判断是否文件已经加载避免重复加载同一文件。
 例如：
 lua> require("test");  --加载并运行test.lua中得内容
 lua> aa();		-->aa

#assert函数
 //如果aa()执行失败，返回后面的信息，否则正常返回(print()有点问题)
 n=assert(aa(),"aa()执行时错误 ");
 
#pcall函数和error函数可以配合在lua中处理异常和错误
 使用pcall执行代码，如果代码返回错误，则pcall返回false和nil;否则返回true
 例子：
	function foo(v)
		status,err=pcall(function()      //相当于java中得try catch
						   if v==1 then
							 //数字是错误级别。
						     error("errors",2); //相当于java中得throw exception
						   else
							 return "hello";
						   end
						 end
					)

		print(status);
		print(err)
   end

#输出栈信息
lua> print(debug.traceback())


#创建协同
 co = coroutine.create(
	  	function()
			print("hi");
		end
	  )
 print(co) -->thread:0x80237690
 print(type(cp)) -->thread

#协同状态
 挂起(suspended)、运行、停止(dead)

#查看协同状态
 print(coroutine.status(co)) -->suspended

#运行挂起状态的程序
 coroutine.resume(co)	-->hi
 print(coroutine.status(co))  -->dead  //运行后状态变为停止

#将运行的程序挂起yield
 co = coroutine.create(
	  	function()
			for i=1,5 do
				print("aa");
				//运行到这里就会挂起,当程序激活的时候会继续执行
				coroutine.yield();
			end 
		end
	  ) 
  //运行
  coroutine.resume(co);			-->aa
  print(coroutine.status(co))	-->suspended

#将一个表链接成字符串
 t={"a","b","c"}
 s=table.concat(t)	-->abc
 s=table.concat(t,"-") -->a-b-c 

#metatables可以改变table的行为 
 lua对两个表相加时会检查两个表是否其中一个有metatable,
 并检查__add域，如果有则用该函数去计算结果。

#获取表的metatable
 lua>t={}
 lua>print(getmetatable(t))    -->nil //默认没有元表

 lua>t1={}
 lua>setmetatable(t,t1)
 lua>assert(getmetatable(t) == t1)

#任何表可以是其他表的metatable，可以共享metatable,也可以是自身.

#metamethod方法
 __add、__sub __mul __div __unm(负) __pow(幂) __concat __eq __lt __le
 __tostring 
 例子：
   m = {}  //元表
   m.__add = function()...end  //定义表+操作
   
   a = {}; setmetatable(a,m); //设置元表
   b = {}; setmetatable(b,m); //设置元表
 此后a+b就是用m.__add函数来处理的

 lua选择metamethod的原则是按顺序找，最后没找到则报错
  
#metafile _metatable,这个属性是设置在元表上的
 如果对metatable设置了__metatable值,getmetatable将返回赋给这个的值，
 调用setmetatable会出错
 例如:
	m={};
	t={};
	
	setmetatable(t,m);
	print(getmetatable(t));		-->table:0x808384

	m.__metatable="haha";
	print(getmetatable(t));		-->haha
	setmetatable(t,{});			-->报错	
  
#__index
 当访问表中的一个不存在的域的时候，lua解释器去查找metatable中__index是否存在，
 如果不存在返回nil；否则，则按__index指定的方法返回结果
 例如:
	m={};
	t={"a"};
	setmetatable(t,m);
	m.__index=function (table,key) return "bb" end  //table是当前table,key是调用的域

	print(t.a);		-->a
	print(t.b);		-->bb

#__index不需要非是一个函数，也可以是一个表。当是一个表的时候,将在这个表中查看是否
 有缺少的域。
 例如：
	m.__index={"bb"};

#__newindex用来对表更新；当给表的一个不存在的域赋值时，就会调用这个函数

#rawget(table,key)和rawset(table,key,value)
 这两个函数可以绕过__index和__newindex等metamethod方法


##全局变量
 所有的全局变量都是放在一个特定 lua table 的诸个域中，这个特定的 table 叫作 
 environment（环境）table 或者简称为"环境"。 
 每个函数都有对一个环境的引用，所以一个函数中可见的所有全局变量都放在这个函数
 所引用的环境表（environment table）中。 
 当一个函数被创建出来，它会从创建它的函数中继承其环境。

 因为环境是也是一张表，所以可以为这个环境表设置原表,以此来更改获取全局变量的行为
 
 lua5.2后这个环境表用_ENV变量表示


##继承上级变量,但又不修改上级变量,可以在自己的函数中做如下操作
 _ENV={__index=_G,_G=_G}; 
 _G.setmetatable(_ENV,_ENV); 


#lua的所有全局变量都存在_G表中(在函数中则是用_ENV表示,可以把_G理解成祖宗)
 for n in pairs(_G) do
	print(n)
 end

#改变一个函数的环境setfenv
 a=1;
 setfenv(1,{}); //改变当前函数的环境变量
 print(a);  -->报错，因为当前函数的环境变量变为空,里面没有print函数

#weak 虚表
 表的weak性有他的元表(metatable)的__mode域来指定，__mode的值是字符串
 例如：
	m={};
	t={};
	setmetatable(t,m);
	m.__mode="k";   //t表的keys时weak的，可以被垃圾收集掉
    m.__mode="v";	//valus是weak的
    m.__mode="kv";	//keys、values都是weak的
  注意：只有对象(表|函数)才可以从一个weak table中被收集。字符、数字等都不会
  所以如果想key被收集应该这样:
	key={};     //key
	t={};		
	t[key] = 1; //赋值,这样这个key就是可以被收集掉的

#插入删除元素
 t={10,28};
 table.insert(t,20);  //插入一个元素t={10,28,20}
 table.insert(t,1,25);//指定位置插入一个元素t={15,10,28,20} 

 table.remove(t,1);   //删除第一个元素 t={10,28,20}

#ipairs、pairs遍历数组.前者使用key的顺序1、2...，后者用表的自然存储顺序

#字符串函数	
 string.len("abc");   //返回字符串的长度,3
 string.rep("abc",2); //将字符串重复两次返回,abcabc
 string.lower("ABC"); //大写转小写 abc
 string.upper("abc");
 string.sub("abc",1,2); //截取字符串
 string.format("%d=%d",4,5);//格式和C语言的print一样

#查找字符串string.find(str,substr,index)  index是开始搜索位置
 i,j=string.find("hello world","hello"); 
 print(i,j); -->1,5 //查找成功,返回子串的开始和结束索引;否则返回nil

#全局字符串替换 string.gsub(str,arg1,arg2,scope) scope是要替换的个数
 s=string.gsub("Lua is cute","cute","great");
 print(s);	-->Lua is great

 s=string.gsub("aa aa aa","a","b",2);
 print(s);	-->bb aa aa
 
#全局字符串查找string.gfind


#模式
 .		任意字符
 %a		字母
 %c		控制字符
 %d		数字
 %l		小写字母
 %p		标点字符
 %s		空白符
 %u		大写字母
 %w		字母和数字
 %x		十六进制数字
 %z		代表0的字符

#捕获子串
 date="17/7/1990";
 i,j,d,m,y=string.find(date,"(%d+)/(%d+)/(%d+)");
 print(i,j,d,m,y);	-->1 9	17	7  1990

#对子串的引用
 s="\command{some text}";
 s=string.gsub(s,"\\(%a+){(.-)}","<%1>%2</%1>");
 print(s);		--><command>some text</command>


#I/O库的所有函数都放在表io中
 print(io);  -->table:0x9d9a0a8a

#简单I/O操作在标准输入(stdin)和标准输出(stdout)
 例如：
	s=io.read(); //之后要求从键盘输入数据，比如abc
	print(s);	-->
	
	io.write("abc\n"); //向屏幕输出abc
 可以用io.input和io.output改变当前文件
 例如：
	------------------>foo.lua<-----------------------
		hello
		nihao
		haha
	--------------------------------------------------
 	io.input("foo.lua"); //之后所有输入都来自该文件	
	s=io.read();
	print(s);	-->hello
	s=io.read();	
	print(s);	-->nihao
	
	//读取整个文件
	io.input("foo.lua");
	s=io.read("*all");
	print(s);	-->hello
				   nihao
				   haha
    //读取下一行
	io.input("foo.lua");
	s=io.read("*line"); 
	print(s);	-->hello
	
	//从一行中转换出一个数值，如果这行有数字的话
    s=io.read("*number");
	
	//读取num个字符
	s=io.read("*8");
    
#完全模式I/O，可以持有一个文件句柄，类似C语言中的FILE*
 filename:文件名
 model:打开类型;r(读) w(写) a(附加) b(二进制)
 return:正确打开，返回文件句柄(file (0x7fff7687d598))
		错误打开，返回nil	错误信息
 io.open(filename,model); 
 例如：
	f = io.open("/etc/passwd","r");
	print(f);	-->file (0x7fff7687d598)

#对完全I/O模式的读写要用冒号
 //读整个文件
 f = io.open("foo.lua","a");
 t = t:read("*all");
 f:write("abc\n");
 f:flush();//刷新缓冲区
 f:close();	//关闭文件  

#发送错误信息到标准错误输出
 io.stderr:write(message);

#读取一个文件的一段并加上一行，这样可以避免切割文件中的行
 text,rest = f:read(30,"*line");  //读取30个字符加一行

#获取某个日期的时钟值
 print(os.time({year=1970,month=1,day=1})); -->12600

#创建一个时间表
 date = os.date("*t",12600);
 //date是一个时间表{year=1970,month=1,day=1,...}

#格式化时间
 date = os.date(model,[时钟值]);
 print(os.date("%Y%m%d")); -->20140820

#当前时间转换为GMT时间
 由于GMT时间和北京相差8个时区,所以北京时间等GMT+8
 所以北京时间减去8个小时就是GMT时间

 print(os.date("%a, %d %b %Y %X GMT",os.time()-28800))

#获取系统环境变量
 print(os.getenv("HOME"));  -->/home/lua

#执行系统命令
 os.execute("mkdir c");  //创建一个目录c

#debug库,获取函数的一些信息
 s = debug.getinfo(函数);
 print(s.source);   //表明函数被定义的地方
 print(s.short_src); //source的简短版本
 print(s.linedefined);//函数被定义之处的行号
 print(s.what);// 表明是C函数、Lua函数、Lua的主chunk
 s.name
 s.namewhat
 s.nups  //函数的upvalues(外部局部变量)的个数
 s.func  //函数本身

#以数字的方式调用debug.getinfo(n)
 返回在n级栈的活动函数的信息数据。
 n=0 ,表示C函数getinfo本身
 n=1 ,表示正在调用的函数的信息

#Hooks,注册一个函数，用来在程序运行中某一事件到达时被调用。
 debug.sethook(foo,"call"):当Lua调用一个函数的时候，调用foo函数
 debug.sethook(foo,"return"):当一个函数返回的时候调用foo函数
 debug.sethook(foo,"line"): 当lua开始执行代码的新行的时候
 debug.sethook(foo,"count",2):执行两个指令后执行foo函数//?不确定这么用
 
#关掉hooks
 debug.sethook();

#栈索引
 从栈底开始索引为1,2,...
 从栈顶开始所因为-1,-2,...

#在C中解析lua文件 以下例子没验证过
 -------------------->lua文件内容<-----------
 	width = 200;
	height = 300;
 --------------------------------------------
 -------------------->C函数<-----------------
 #include <lua.h>
 #include <lauxlib.h>
 #include <lualib.h>

 void load(char *filename,int *width,int *height){
 	lua_State *L = lua_open(); //具体语义以后查文档
 	luaopen_base(L); //加载基本库
	luaopen_io(L);	//加载io库
	luaopen_string(L);	
	luaopen_math(L);

	if(luaL_loadfile(L,filename) || lua_pcall(L,0,0,0)){
		//如果加载文件失败，或者调用失败，则做点什么
	}	

	//将加载后的文件中得全局变量入栈
	lua_getglobal(L,"width");
	lua_getglobal(L,"height");

	//检查入栈的参数是不是数字
	if(!lua_isnumber(L,-2)){ //检查width变量
		//不是数字tosomething
	}
	if(!lua_isnumber(L,-1)){ //检查height
		//
	}	

	//从栈中取出数字供C使用
	*width = (int)lua_tonumber(L,-2);
	*height = (int)lua_tonumber(L,-1);
	
	//关闭栈
	lua_close(L);
 }
 ----------------------------------------------

#在C中调用lua函数
 1.将被调用的函数入栈
 2.一次将所有参数入栈
 3.使用lua_pcall调用函数
 4.从战中获取函数返回的结果

 --------------->lua函数<-----------
	function f(x,y)
		return x+y;
	end
 -----------------------------------
 --------------->C函数<-------------
	double f(double x,double y){
		double z;
		
		//将被调用的函数f入栈
 		lua_getglobal(L,"f");
		//将第一个参数入栈
		lua_pushnumber(L,x);
		//将第二个参数入展
		lua_pushnumber(L,y);
		
		//调用函数
		if(lua_pcall(L,2,1,0) != 0){
			//调用函数出错
		}
	
	    //检查返回到栈顶得数据是不是数字
		if(!lua_isnumber(L,-1)){
			//函数f没有正确返回一个数字
		}	
	
		//拿到栈顶的数字
		z = lua_tonumber(L,-1);
		lua_pop(L,1);	//弹出栈顶返回的值
	
		return z;
	}

#lua_pcall可以指定参数的个数和返回结果的个数。第四个参数指定一个
 错误处理函数,0代表没有错误函数。lua_pcall执行完后，在将结果入栈
 之前，会将站内的所有数据移除掉。如果有多个结果，第一个结果被第
 一个入栈，所以如果有两个结果，那么第二个结果在栈中得位置为-2。
 如果lua_pcall运行时出现错误，lua_pcall会返回一个非0的结果。在将
 错误信息入栈之前，如果有错误函数，那么会先调用错误函数.
 注意，如果要指定错误函数，则应该在其他参数入栈之前将错误函数入栈
 然后将其在栈中的索引给lua_pcall的第四个参数。


#lua调用C函数，需要先注册
 ----------------------->C函数<--------------------
	static int l_sin(lus_State *L){ //lua调用该函数时会将参数放入栈中

		double d = lua_tonumber(L,1); //从栈中获取参数
		lua_pushnumber(L,sin(d));	//结果放入栈中,lua会从栈中拿结果
		lua_pushstring(L,"sucess"); //第二个返回值
		
		return 1;
	}
 ---------------------------------------------------
 
 -------------------->C代码<------------------------
	//将C函数注册到lua中,其中C函数必须是这种格式 typedef int(*lua_CFunction)(lua_State *L);
	lua_pushfunction(L,l_sin);
	lua_setglobal(L,"mysin"); //C函数在lua中得名字
 ----------------------------------------------------


#require(modname) 查找模块的顺序
 1)去package.loaded 表中查找是否有该modname,如果有则返回
 2)通过package.loaders中的4个方法去决定从哪里查找模块
 3)第一个方法是先去package.preload[modname]中找,如果返回
     一个值(这个值应该是一个函数),那这个值就是loader。
 4)第二个从package.path指定的路径去加载.lua的文件,成功则返回。
 5)第三个从package.cpath指定的路径去加载.so的问文件,成功则返回。
 6)第四个方法用all-in-one ?


#冒号(:)和点(.)的区别
 lua中冒号不管是用在定义方法上,还是调用方法上,都是表示自动加上self参数.
 例子:
	Person = {};
	Person._index = Person; 
 
    function Person:new(x,y)
		local temp = {};		
		setmetatable(temp,Person); //为temp设置元表
		temp.x = x;
		temp.y = y;
		
		return temp;
	end

    //上面方法的定义等同于如下方法的定义:
	function Person.new(self,x,y)
		local temp = {}
		//...
		return temp;
	end

    //以下两个方法调用等价
    local person1 = Person:new(10,20);    
    local person2 = Person.new(self,10,20);

#lua中协程间的通信
  1.协程第一次被启动时,传递给coroutine.resume的参数将传递给协程主程序。
  2.协程挂起时,传递给coroutine.yield的参数将作为启动它的resume的返回值返回。
  (注意,这里说的是resume的返回值,并不是yield的返回值,挂起后yield还没有返回值)
  3.协程被再次启动时,传递给resume的参数,将作为上次挂起它的yield的返回值返回。
  (再次启动时,yield方法才会有返回值,并且就是启动它的resume的参数).
  4.协成死亡时,最后一次启动它的resume的返回值,就是主程序的返回值.
 
  总结:
	大概的意思就是,挂起时给yield传递的是什么值,resume返回的就是什么值.
    从挂起点启动时,给resume传递的什么值,这个挂起点(yield)返回的就是什么值。
	
	还有一点要注意的是,主函数的入参变量,在通过resume启动时只会赋值一次,随后
    的启动可以认为不算是一次方法调用,更像一次线程上下文切换。
    所以挂起后再次调用resume时传递的参数,并不会对主函数的入参变量赋值,只是
    用来给挂起点(yield)当返回值用的。

    resume函数的入参是yield函数的返回值，yield的入参是resume函数的返回值
    (注意:携程第一次启动时调用resume的入参不是yield的返回值，就是传入主函数的工作入参)


  例子：
	local co = coroutine.create(function(a,b)
					local x,y = coroutine.yield(a,b);  --1
          			print(x,y);                        --2
			
					local x,y,z = coroutine.yield(a,b);  --3
					print(x,y,z);                        --4
					
					return "end";                      --5
               end)

    //1.协程第一次启动,会把传递给resume的参数(1,2)传递给主函数,
    //  这时候主函数开始执行,但是在--1处遇到了yield方法,所以这时
    //2.协程挂起,并且把传递给yield的参数(1,2)作为resume的返回值返回.
    //  所以会打印出"true 1 2"。打印true是说明resume执行成功.
    print(coroutine.resume(co,1,2));
    --> true 1 2

    //3.再次启动协程,这时候程序会从挂起点--1处开始执行,并把传递给resume
    //  的参数(3,4),作为挂起点--1处的yield方法的返回值。直到这一步我们
    //  才看到yield方法的返回值。
    //  对于yield的返回可以这样理解:
    //    1.挂起时的返回是替resume返回的
    //    2.从挂起点启动时的返回才是替自己返回的
    //  所以这时候第一个 local x,y 才被赋值 3,4并打印  

    //4.打印完3,4后,协成再次挂起时,传递给yield的参数仍然是局部变量a,b(1,2)
    //  所以把1,2作为resume的返回值。
    print(coroutine.resume(co,3,4));
    -->3,4
    -->true 1,2
   
    //5.再次启动,这时候和步骤3相似,从挂起点--3出开始执行,并把传递给resume
    //  的参数5,6,7作为yield的返回值,赋值给第二个local x,y,z随后打印5,6,7并
    //  将主函数的返回值"end"作为resume的返回值返回。
    print(coroutine.resume(co,5,6,7));
	-->5,6,7
    -->true end
  

#lua支持gbk编码的len和sub方法的例子
********************************************************
 //返回字符串的长度
 function len(str)
 	local len = string.len(str);
 	local n = 0;
 	local i = 1;
 	
 	while i<=len do	
 		local b = string.byte(str,i,i);
 		if (b>128) and (b<255) then
 			i=i+2;
 			n=n+1;
		else
			n=n+1;
			i=i+1;
 		end 		
 	end
 	
 	return n;
 end
 
 print(len("123,中国abc中"));
 
 //截取字符串,从第j个字符开始,到第k个字符
 function sub(str,j,k)
 	local len = string.len(str);
 	
 	if k >= len then
 		return string.sub(str,1,-1);
 	end
 	
 	local n = 0;
 	local i = 1;
 	local old_i = 1;
 	local tmpj = 0;
 	local tmpk = 0;
 	
 	while i<=len do
 		local b = string.byte(str,i,i);
 		if (b>128) and (b<255) then
 			n=n+1;
 			old_i = i;
 			i=i+2;
		else
			n=n+1;
			old_i = i;
			i = i+1;
 		end 	
 		
 		if j==n then
 			tmpj = old_i;
 		end	
 		
 		if k==n then
 			tmpk = i-1;
 			break;
 		end
 	end
 	
 	if tmpk == 0 then
 		tmpk = -1;
 	end
 	
 	return string.sub(str,tmpj,tmpk);
 end
 
 print(sub("abc中国.,fds人",1,9));

******************************************************


****************支持utf8编码字符的sub******************
 --1000 0000  80
 --1100 0000  C0
 --1110 0000  E0
 --1111 0000  F0
 --1111 0111  F7
 --截取字符串,从第j个字符开始,到第k个字符
 --该方法不严谨,没有校验多字节字符的后续字节的有效性
 function sub(str,j,k)
 	local len = string.len(str);
 	
 	if k >= len then
 		return string.sub(str,1,-1);
 	end
 	
 	local n = 0;
 	local i = 1;
 	local old_i = 1;
 	local tmpj = 0;
 	local tmpk = 0;
 	
 	while i<=len do
 		local b = string.byte(str,i,i);
		local num = -1;
		num = (b < 0x80 and 1) or (b > 0xC0 and (b < 0xE0 and 2))
				or (b > 0xE0 and (b < 0xF0 and 3)) or (b > 0xF0 and (b < 0xF7 and 4))
					or -1;

		if num == -1 then
			error("invalid UTF-8 character",2);
			num = 1;		
		end

 		n=n+1;
 		old_i = i;
 		i=i+num;
 		
 		if j==n then
 			tmpj = old_i;
 		end	
 		
 		if k==n then
 			tmpk = i-1;
 			break;
 		end
 	end
 	
 	if tmpk == 0 then
 		tmpk = -1;
 	end
 	
 	return string.sub(str,tmpj,tmpk);
 end


 --打印
 print(sub("abc中国.,fds人",3,5));

***************************************************

#luaL_checklstring(lua_State *L,int narg,size_t *l);
 检查栈narg位置的参数是否是一个字符串,然后返回这个字符串；
 如果l不是NULL则*l会被赋值为该字符串的长度
 如果发生错误则这个lua函数会抛出异常,并返回错误信息
 (例如:bad argument #1)

#lua_Number
 lua_Number是一个类型定义：
 	typedef double lua_Number;
 可以在luaconf.h中修改

#lua调用C函数的例子1
//------------demo.c--------	
	#include <lua.h>
	#include <lauxlib.h>
	#include <lualib.h>
	//MAC下编译有问题
	//在测试机上需要正确的引用lua.h等文件

	static int msg(lua_State *L){
		//检查lua函数的第一个参数是不是数字,如果是则返回这个数字
    	//如果发生错误则这个lua函数会抛出异常,并返回错误信息
    	//(例如:bad argument #1). 
		//lua_Number是一个类型定义,如下：
    	//typedef double lua_Number;
    	//可以在luaconf.h中修改
		lua_Number num = luaL_checknumber(L,1);
	
    	//将数字原样放入返回值中
    	lua_pushnumber(L,num); //第一个返回值
		//返回信息
    	lua_pushstring(L,"sucess"); //第二个返回值

		//该函数有两个返回值
		return 2;
	}

	//将这个c函数注册到lua中
	//一个luaopen_*(*表示c库的名称)函数指定C库的名称
	//lua通过require等关键字可以直接调用luaopen_*这个函数
	int luaopen_demo(lua_State *L){
		//所有要注册到lua中的c函数放到luaL_Reg数组中
    	const luaL_Reg methods = {
									{"msg",msg},
									{NULL,NULL}		
		};

		//注册c方法到lua
    	//此时栈顶的值是demo
		luaL_register(L,"demo",methods);
	
		//设置demo.null的值
		lua_pushlightuserdata(L,NULL); //此时栈顶元素是NULL
		//将栈顶的值,放置到栈顶第二个位置的null属性中,然后弹出栈顶
		//demo.null=NULL
		lua_setfield(L,-2,"null"); 

    	//设置版本
    	lua_pushliteral(L,"0.0.1");
		//demo.version=0.0.1
		lua_setfield(L,-2,"version");

		return 1;
	}
//----------------------------------

#luaL_setfuncs  5.2才有
 /**
  * 把数组reg中所有的C函数注册到栈中的一个表中,如果nup等于0,则这表就在栈顶中. 
  * 如果不等于0,则该表在nup个upvalue之下,并且reg数组中的所有函数都会关联上这
  * 几个upvalue.
  * 最后所有的upvalue都会被弹出,只剩栈顶的表.
  *
  * L 栈
  * reg 要注册的函数
  * nup upvalue的个数,如果nup不为0,则调用该方法前必须将nup个upvalue压入栈中.
  * 
  * @see /ngx_openresty-1.7.2.1/bundle/lua-cjson-2.1.0.1/lua_cjson.c/luaL_setfuncs()
  */
 void luaL_setfuncs(lua_State *L,const luaL_Reg *reg,int nup)

 例子:
	luaopen_abc(lua_State *l){
        //要注册的C方法数组
		luaL_Reg reg[] = {
			{"add",add},
			{"sum",sum},
			{NULL,NULL}	
		};
		
        //创建一个空表并压入栈顶
		lua_newtable(l); //记作t
        
        //将reg中所有的C函数注册到栈顶的表中,我们这里没有使用upvalue
        //所以nup等于0.
		luaL_setfuncs(l,reg,0);//成功后栈顶元素是t

        //向栈顶压入一个字符串
        lua_pushliteral(l,"0.0.1"); //成功后栈顶的下一个元素是t
       
        //为栈中-2位置元素的VERSION属性赋值为栈顶的值
        //即 t.VERSION="0.0.1"
        setfiled(l,-2,"VERSION"); //成功后栈顶元素为t

		//该函数有一个返回值,即栈顶元素t
		return 1;		
	}




#LuaJIT FFI
 FFI库允许从纯Lua代码调用外部C函数,使用C的数据结构

##使用FFI调用C函数
  传统lua调用c函数,需要按照lua的规范去写相应的c,然后编译成库文件,但是我们
  写成的这个函数就只能在lua中调用,虽然也是一个.so库。

  而使用FFI可以直接调用C函数,例子如下:
	//加载ffi模块
	local ffi = require("ffi");
	
	//声明C函数和C结构体
	ffi.cdef[[
			int printf(const char* fmt,...);
			typedef struct {int a;int b;} foo_t;
		]];

	//用ffi.C这个命名空间掉c函数
    ffi.C.printf("Hello %s!","world");
 
    //创建foo_t这个结构体,并初始化
	cdata = ffi.new("foo_t",4,5); 

	//打印这个结构体的值
    print(cdata.a); -->4
	print(cdata.b); -->5
    
##创建C数据对象
  cdata = ffi.new(ct [,nelem],[,init ...]); 
  ct: c数据类型描述符,如"struct person"
  nelem: 结构体中类似int[?]的变长数组的初始化值
  init: 其他类型的初始化值

  ctype = ffi.typeof(ct);
  cdata = ctype([nelem,][init...]);


