在javascript中函数就是Function的对象;new Function("arg0","arg1","argn","方法体")

 function add(number){
	alert(number+10);
 }
 上面的函数[对象]等价于，下面这个函数[对象]
 var add = function(number){
	alert(number+10);
 }
 上面的函数[对象]等价于下面这个对象
 var add = new Function("number","alert(number+10)");
 [new Function("arg0","arg1","函数体");]


JavaScript中没有函数重载的概念

在JavaScript中有一个Function对象，所有自定义的函数都是Function对象类型的


在JavaScript中，每个函数都有一个隐含的对象arguments,表示给函数实际传递的参数

 例如
	function add(number1,number2){
		alert(arguments.length);
		alert(arguments[0]);
		alert(arguments[1]);
		alert(arguments[2]);
	}
 调用   add(2,3,4);


 每一个函数对象都有一个length属性，表示该函数
 期望接收的参数个数。它与函数的arguments不同，
 arguments.length表示函数实际接收的参数个数.
 比如上面的add函数add.length=2,但是实际调用时是三个
 参数，所以arguments.length=3


JavaScript中有五种原始数据类型Undefined、Null、Boolean、Number、String。
 a)Undefined数据类型的值只有一个：undefined
 b)Null数据类型的值只有一个:null
 c)Boolean数据类型的值有两个:true、false

typeof是一元运算符，后跟变量的名称，用于获取变量的数据类型
，其返回值有5个：undefined、boolean、number、string、object


如果函数没有返回值，那么会返回undefined

null与undefined的关系：undefined实际上是从null
派生出来的。alert(undefined == null)是true;


JavaScript中有3中强制类型转换:
 Boolean(value),Number(value),String(value)/不是生成对象
 var s = new String("hello");
 var s1 = String("hello");
 alert(typeof s);//打印object
 alert(typeof s1);//打印string


在JavaScript中，对于函数中定义的变量来说，
加var表示局部变量，不叫var表示全局变量


JavaScript中所有对象都是从Object对象继承过来的。
Object中的属性是不可枚举的(object.propertyIsEnumerable("属性")返回false),
因此无法通过for...in语句得到其中的属性


可以动态添加对象的属性，也可以动态删除对象的属性
var obj = new Object();
obj.username = "masf";//obj["username"] = "masf"
alert(obj.username);
delete obj.username;// username属性已经从object对象中删除
alert(obj.username)


定义对象的最常见的方式：
 var obj = {username:"masf",password:123}

数组排序
array.sort(compare)//compare是一个对象[函数]引用和java中的compareTo(arg0,arg1)一样



++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
JavaScript中定义对象的几种方式(javascript中没有类的概念只有对象)
  a) 基于已有对象扩充其属性和方法
     var object = new Object();
     object.name = "zhangsan";
     object.sayName = function(name){
     	this.name = name;
        alert(this.name);
     }
     object.sayName("lisi");
  b) 工厂方式
     function createObject(){
	var object = new Object();
        object.username = "zhangsan";
        object.password = "123";
       
        object.get = function(){//这种方式每个对象都会创建一个方法，占用内存
	     alert(this.username+" ,"+ this.password);
	}
	
        return object;
     }

     var object1 = createObject();
     var object2 = createObject();
     object1.get();
    -----------------另一种方式---------------------
    function get(){
	alert(this.username+" ,"+this.password);
    }
    
    function createObject(username,password){
       var object = new Object();
       object.username = username;
       object.password = password;
      
       object.get = get;//将方法定义在外面
       
       return object;
     }

     var object = createObject("zhangsan","123");
     var object2 = createObject("lisi","456");

  c)用new的方式；上面的工厂方式直接调用就可以，而下面这种方式用new
    function Person(){
        //在执行第一行代码前,js引擎会为我们生成一个对象this;类似于我们上面方法中的 var this = new This();
        this.username = "zhangsan";
				this.password = "123";
       	this.getInfo = function(){
	    		alert(this.username + " ," + this.password);
				}
       //此处有一个隐藏的return语句,用于将之前生成的对象返回
    }

    var person = new Person();//只有用new的方式才会有上面方法的两个隐含动作,直接调用该函数不会执行隐含动作
    person.getInto();

  d)原型("prototype")方式;单纯使用原型方式无法在构造函数中为属性赋初值，只能在对象生成后再去改变属性值
    function Person(){
    }
    
    Person.prototype.username = "zhangsn";
    Person.prototype.password = "123";
    
    Person.prototype.getInfo = function(){
	alert(this.username +" , " +this.password);
    }

    var person = new Person();
    var person2 = new Person();

    person.username = "lisi";
     
    person.getInfo();
    person2.getInfo();
	
    如果使用原型方式定义对象，那么生成的所有对象会共享
    原型中的属性，这样一个对象改变了改属性引用对象中的内容，改属性业务放映到其他对象
    比如，如果上面中username指向的是一个数组即username= new Array();
    person.username.push("123");也会放映到perosn2对象上；
    如果只是让person.password="456"测只会改变person对象的password值,为指针改变了,类似于java中的字符串

  e)使用原型+构造函数方式来定义对象;// 这种方式可以保证每个对象都有独立的属性和共享的方法
    function Person(){
	this.username = new Array();
	this.password = "123";
    }
    
    Person.prototype.getInfo = function(){
	alert(this.username+","+ this.password);
    }

    var p = new Person();
    var p2 = new Person();
    p.username.push("zhangsan");
    p2.usernanme.push("lisi");
    
    p.getInfo();
    p2.getInfo();

  f)动态原型：在构造函数中通过标志量让所有对象共享一个方法，而每个对象拥有自己的属性
   function Person(){
	   this.username = "zhangsan";
	   this.password = "123";
	   if(typeof Person.prototype.getInfo == "undefined"){
     		alert("dd");
		Person.prototype.getInfo = function(){
		   alert(this.username+","+this.password);
		}	
     	  	Person.flag = true;
	   }
   }	
      
   var p = new Person();
   var p2 = new Person();


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
JavaScript中的继承
  1)对象冒充
    function Parent(username){
       this.username = username;
       this.sayHello = function(){
       	  alert(this.username);
       }
    }
   
    function Child(username,password){
       this.method = Parent;//这样做可以把this对象传给Parent来冒充它
       this.method(username);
       delete this.method;

       this.password = password;

       this.sayWorld = function(){
	  alert(this.password);
       }
    }
    
    var parent = new Parent("zhangsan");
    var child = new Child("lisi","1234");

    parent.sayHello();//父亲
    
    child.sayHello();//从父亲继承
    child.sayWorld();//子类自己的 

2)call方法方式,Function对象中的方法
  call方法是Function对象中的方法，因此我们定义的每个函数
  都拥有该方法。可以通过函数名来调用call方法，
  call方法的第一个参数会被传递给函数中的this[替换掉this]，
  从第二个参数开始，逐一赋值给函数中的参数。
  function Parent(username){
     this.username = username;
     this.sayHello = function(){
     	alert(this.username);
     }
  }
  
  function Child(username,password){
      Parent.call(this,username);//继承父对象
      
      this.password = password;
      this.sayWorld = function(){
      	 alert(this.password);
      }
  }

  var parent = new Parent("zhangsan");
  var child = new Child("lisi","123");
   
  parent.sayHello();
  
  child.sayHello();
  child.sayWorld();

3)apply方法方式
    与call方法类似
    call方法是Parent.call(this,username);//继承父对象
    applay方法是Parent.apply(this,new Array(username));//继承父对象

4)原型链方式//这种方式无法传参数
    function Parent(){	
    }
    Parent.prototype.hello = “hello”;
    Parent.prototype.sayHello =function(){
	 alert(this.hello);
    }
    
    function Child(){
    }
    Child.prototype = new Parent();

    Child.prototype.world = “world”;
    Child.Prototype.sayWorld = function(){
	 alert(this.world);
    }

    var child  = new Child();

    child.sayHello();
    child.sayWorld();
 
  5)混合方式实现对象继承[推荐]
    function Parent(hello){
         this.hello = hello;
    }
    Parent.prototype.sayHello = function(){
         alert(this.hello);
    }

    function Child(hello,world){
       Parent.call(this,hello);//这种方式可以实现属性的继承
       this.world = world;
    }

    Child.prototype = new Parent();//这样可以把方法都继承过来
    Child.prototype.sayWorld = function(){
       alert(this.world);
    }

    var child = new Child(“hello”,”world”);

    child.sayHello();
    child.sayWorld();
