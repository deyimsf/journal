#安装typescript编译器
    npm i -g typescript

#编译文件
    tsc index.ts

#声明变量
    let a:number;
    a = 10;

#如果变量的声明和赋值是同时进行，TS可以自动对变量进行类型检测
    let c = true;  (等同 let c:boolean = true)
    c = false;
    c = "abc"; //这里报错

#any表示任意类型，可以被赋值给任意类型
    let d: any; (等同于 let d;)

#unknown 表示未知类型的值，不能赋值给有类型定义的变量
    let a:unknown;
    a = 10;

    let b:number;
    b = a; //这里会报错，因为a不是number类型

#类型断言,可以高速解析器变量的实际类型
    b = a as number
    b = <number>a

#void 表示空 (undefied)
    function fun(): void{

    }

#never 表示绝对不会返回结果,不能是任何值
    function fun(): never {
        throw new Error('报错了');
    }

#object 任意js对象
    let a: object

#{} 表示一个特定的对象中必须包含哪些属性
#语法: {属性名:属性值, 属性名:属性值}
#在属性名后加?,表示属性是可选的
#在对象中加[abc:string]: number，表示该对象可以有任意多个值是number的属性
#  [任意字符: 对象属性的类型]: 对象属性值类型   --->这叫索引签名
    let b: {name: string}
    b = {name:"hello"}

    b = {} //错误
    b = {name:"abc", age:18} //错误

    //在属性名后加?,表示属性是可选的
    let d: {name: string, age?:number} //age属性是可选的
    d = {name: "abc"} //正确

    //在对象中加[abc:string]: number，表示该对象可以有任意多个值是number的属性
    let c: {name:string, [abc:string]: number}
    c = {name: '八戒', age:18, gender:'男'

# 设置函数结构类型声明:
#   语法: (形参:类型, 形参:类型, ...) => 返回值类型
    let fun: (a:number, b:string)=>number
    fun = function(n1:number, n2:string){
        return 20;
    }

#数组类型声明
    let e: string[]
    let g: Array<number>


#tuple 元组，是笃定长度的数组
    let h: [string, string]
    h = ['abc','gds']
    h = ['adc','fds','ddd'] //错误,多了一个元素

#enum 枚举
    enum Gender{
        Male, // 可以指定枚举值  Male = 1
        Female
    }
    let i: {name:string, gender: Gender}
    i = {
        name:"张三",
        gender: Gender.Female
    }
    console.log(i.gender === Gender.Female)

#&可以连接两对象，表示同时
    let j: {name:string} & {age: number}
    j = {name: '张三', age: 19}

#类型别名
    type myType = 1|2|'h'|4
    let k: myType
    k = 2;
    k = 'h'

#在package.json中加入 build，表示使用webpack来打包编译代码
    "scripts": {
        "build": "webpack"
        "start": "webpack server  --open chrome"
     }
  然后执行 npm run build命令来启动打包

#webpack内部服务器
    cnpm i -D webpack-dev-server

    // 在package.json中加入,表示运行webpack服务器，并打开Chrome浏览器
     "scripts": {
        "start": "webpack server  --open chrome"
     }

#兼容工具
    cnpm i -D @babel/core @babel/preset-env babel-loader core-js



